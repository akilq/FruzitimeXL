! function(a, i) { jPlayerPlaylist = function(s, t, e) { var i = this;
        this.current = 0, this.loop = !1, this.shuffled = !1, this.removing = !1, this.cssSelector = a.extend({}, this._cssSelector, s), this.options = a.extend(!0, { keyBindings: { next: { key: 221, fn: function() { i.next() } }, previous: { key: 219, fn: function() { i.previous() } }, shuffle: { key: 83, fn: function() { i.shuffle() } } }, stateClass: { shuffled: "jp-state-shuffled" } }, this._options, e), this.playlist = [], this.original = [], this._initPlaylist(t), this.cssSelector.details = this.cssSelector.cssSelectorAncestor + " .jp-details", this.cssSelector.playlist = this.cssSelector.cssSelectorAncestor + " .jp-playlist", this.cssSelector.next = this.cssSelector.cssSelectorAncestor + " .jp-next", this.cssSelector.previous = this.cssSelector.cssSelectorAncestor + " .jp-previous", this.cssSelector.shuffle = this.cssSelector.cssSelectorAncestor + " .jp-shuffle", this.cssSelector.shuffleOff = this.cssSelector.cssSelectorAncestor + " .jp-shuffle-off", this.options.cssSelectorAncestor = this.cssSelector.cssSelectorAncestor, this.options.repeat = function(s) { i.loop = s.jPlayer.options.loop }, a(this.cssSelector.jPlayer).bind(a.jPlayer.event.ready, function() { i._init() }), a(this.cssSelector.jPlayer).bind(a.jPlayer.event.ended, function() { i.next() }), a(this.cssSelector.jPlayer).bind(a.jPlayer.event.play, function() { a(this).jPlayer("pauseOthers") }), a("#top-player .jp-play").click(function(s) { a(".jpl-play").removeClass("now-playing") }), a(this.cssSelector.jPlayer).bind(a.jPlayer.event.resize, function(s) { s.jPlayer.options.fullScreen ? a(i.cssSelector.details).show() : a(i.cssSelector.details).hide() }), a(this.cssSelector.previous).click(function(s) { s.preventDefault(), i.previous(), i.blur(this) }), a(this.cssSelector.next).click(function(s) { s.preventDefault(), i.next(), i.blur(this) }), a(this.cssSelector.shuffle).click(function(s) { s.preventDefault(), i.shuffled && a(i.cssSelector.jPlayer).jPlayer("option", "useStateClassSkin") ? i.shuffle(!1) : i.shuffle(!0), i.blur(this) }), a(this.cssSelector.shuffleOff).click(function(s) { s.preventDefault(), i.shuffle(!1), i.blur(this) }).hide(), this.options.fullScreen || a(this.cssSelector.details).hide(), a(this.cssSelector.playlist + " ul").empty(), this._createItemHandlers(), a(this.cssSelector.jPlayer).jPlayer(this.options) }, jPlayerPlaylist.prototype = { _cssSelector: { jPlayer: "#jquery_jplayer_1", cssSelectorAncestor: "#jp_container_1" }, _options: { playlistOptions: { autoPlay: !1, loopOnPrevious: !1, shuffleOnLoop: !0, enableRemoveControls: !1, displayTime: "slow", addTime: "fast", removeTime: "fast", shuffleTime: "slow", itemClass: "jp-playlist-item", freeGroupClass: "jp-free-media", freeItemClass: "jp-playlist-item-free", removeItemClass: "jp-playlist-item-remove" } }, option: function(s, t) { if (t === i) return this.options.playlistOptions[s]; switch (this.options.playlistOptions[s] = t, s) {
                case "enableRemoveControls":
                    this._updateControls(); break;
                case "itemClass":
                case "freeGroupClass":
                case "freeItemClass":
                case "removeItemClass":
                    this._refresh(!0), this._createItemHandlers() } return this }, _init: function() { var s = this;
            this._refresh(function() { s.options.playlistOptions.autoPlay ? s.play(s.current) : s.select(s.current) }) }, _initPlaylist: function(s) { this.current = 0, this.shuffled = !1, this.removing = !1, this.original = a.extend(!0, [], s), this._originalPlaylist() }, _originalPlaylist: function() { var t = this;
            this.playlist = [], a.each(this.original, function(s) { t.playlist[s] = t.original[s] }) }, _refresh: function(s) { var e = this; if (s && !a.isFunction(s)) a(this.cssSelector.playlist + " ul").empty(), a.each(this.playlist, function(s) { a(e.cssSelector.playlist + " ul").append(e._createListItem(e.playlist[s])) }), this._updateControls();
            else { var t = a(this.cssSelector.playlist + " ul").children().length ? this.options.playlistOptions.displayTime : 0;
                a(this.cssSelector.playlist + " ul").slideUp(t, function() { var t = a(this);
                    a(this).empty(), a.each(e.playlist, function(s) { t.append(e._createListItem(e.playlist[s])) }), e._updateControls(), a.isFunction(s) && s(), e.playlist.length ? a(this).slideDown(e.options.playlistOptions.displayTime) : a(this).show() }) } }, _createListItem: function(s) { var e = this,
                i = "<li><div class='jpl-details'>"; if (i += "<a href='javascript:;' class='" + this.options.playlistOptions.removeItemClass + "'>&times;</a>", s.free) { var l = !0;
                i += "<span class='" + this.options.playlistOptions.freeGroupClass + "'>(", a.each(s, function(s, t) { a.jPlayer.prototype.format[s] && (l ? l = !1 : i += " | ", i += "<a class='" + e.options.playlistOptions.freeItemClass + "' href='" + t + "' tabindex='-1'>" + s + "</a>") }), i += ")</span>" } return i += "<span class='jpl-info-simple'><a href='javascript:;' class='jpl-play " + this.options.playlistOptions.itemClass + "' tabindex='0'>" + s.title + (s.artist ? " <span class='jp-artist'>by " + s.artist + "</span>" : "") + "</a></span>", i += s.number ? " <span class='number'>" + s.number + "</span>" : "", i += s.cover ? " <span class='jpl-cover'><img src='" + s.cover + "' alt=''></span>" : "", i += "<span class='jpl-info'>" + (s.title ? " <span class='jpl-title'>" + s.title + "</span>" : "") + (s.artist ? " <span class='jpl-artist'>" + s.artist + "</span>" : "") + (s.text ? " <span class='jpl-text'>" + s.text + "</span>" : "") + "</span>", i += "<span class='jpl-controls'><a href='javascript:;' class='jpl-play " + this.options.playlistOptions.itemClass + "' tabindex='0'><span class='listen'>LISTEN</span></a>" + (s.infolink ? "<a class='infolink' href='" + s.infolink + "'>INFO</a>" : "") + "</span>", i += "</div></li>" }, _createItemHandlers: function() { var e = this;
            a(this.cssSelector.playlist).off("click", "a." + this.options.playlistOptions.itemClass).on("click", "a." + this.options.playlistOptions.itemClass, function(s) { s.preventDefault(); var t = a(this).parent().parent().parent().index();
                e.current !== t ? (a(".jpl-play").removeClass("now-playing"), a(this).addClass("now-playing"), e.play(t)) : a(this).hasClass("now-playing") ? (a(this).removeClass("now-playing"), a(e.cssSelector.jPlayer).jPlayer("pause")) : (a(this).addClass("now-playing"), a(e.cssSelector.jPlayer).jPlayer("play")), e.blur(this) }), a(this.cssSelector.playlist).off("click", "a." + this.options.playlistOptions.freeItemClass).on("click", "a." + this.options.playlistOptions.freeItemClass, function(s) { s.preventDefault(), a(this).parent().parent().find("." + e.options.playlistOptions.itemClass).click(), e.blur(this) }), a(this.cssSelector.playlist).off("click", "a." + this.options.playlistOptions.removeItemClass).on("click", "a." + this.options.playlistOptions.removeItemClass, function(s) { s.preventDefault(); var t = a(this).parent().parent().index();
                e.remove(t), e.blur(this) }) }, _updateControls: function() { this.options.playlistOptions.enableRemoveControls ? a(this.cssSelector.playlist + " ." + this.options.playlistOptions.removeItemClass).show() : a(this.cssSelector.playlist + " ." + this.options.playlistOptions.removeItemClass).hide(), this.shuffled ? a(this.cssSelector.jPlayer).jPlayer("addStateClass", "shuffled") : a(this.cssSelector.jPlayer).jPlayer("removeStateClass", "shuffled"), a(this.cssSelector.shuffle).length && a(this.cssSelector.shuffleOff).length && (this.shuffled ? (a(this.cssSelector.shuffleOff).show(), a(this.cssSelector.shuffle).hide()) : (a(this.cssSelector.shuffleOff).hide(), a(this.cssSelector.shuffle).show())) }, _highlight: function(s) { this.playlist.length && s !== i && (a(this.cssSelector.playlist + " .jp-playlist-current").removeClass("jp-playlist-current"), a(this.cssSelector.playlist + " li:nth-child(" + (s + 1) + ")").addClass("jp-playlist-current").find(".jp-playlist-item").addClass("jp-playlist-current")) }, setPlaylist: function(s) { this._initPlaylist(s), this._init() }, add: function(s, t) { a(this.cssSelector.playlist + " ul").append(this._createListItem(s)).find("li:last-child").hide().slideDown(this.options.playlistOptions.addTime), this._updateControls(), this.original.push(s), this.playlist.push(s), t ? this.play(this.playlist.length - 1) : 1 === this.original.length && this.select(0) }, remove: function(s) { var e = this; return s === i ? (this._initPlaylist([]), this._refresh(function() { a(e.cssSelector.jPlayer).jPlayer("clearMedia") }), !0) : !this.removing && (0 <= (s = s < 0 ? e.original.length + s : s) && s < this.playlist.length && (this.removing = !0, a(this.cssSelector.playlist + " li:nth-child(" + (s + 1) + ")").slideUp(this.options.playlistOptions.removeTime, function() { if (a(this).remove(), e.shuffled) { var t = e.playlist[s];
                    a.each(e.original, function(s) { if (e.original[s] === t) return e.original.splice(s, 1), !1 }), e.playlist.splice(s, 1) } else e.original.splice(s, 1), e.playlist.splice(s, 1);
                e.original.length ? s === e.current ? (e.current = s < e.original.length ? e.current : e.original.length - 1, e.select(e.current)) : s < e.current && e.current-- : (a(e.cssSelector.jPlayer).jPlayer("clearMedia"), e.current = 0, e.shuffled = !1, e._updateControls()), e.removing = !1 })), !0) }, select: function(s) { 0 <= (s = s < 0 ? this.original.length + s : s) && s < this.playlist.length ? (this.current = s, this._highlight(s), a(this.cssSelector.jPlayer).jPlayer("setMedia", this.playlist[this.current])) : this.current = 0 }, play: function(s) { 0 <= (s = s < 0 ? this.original.length + s : s) && s < this.playlist.length ? this.playlist.length && (this.select(s), a(this.cssSelector.jPlayer).jPlayer("play")) : s === i && a(this.cssSelector.jPlayer).jPlayer("play") }, pause: function() { a(this.cssSelector.jPlayer).jPlayer("pause") }, next: function() { var s = this.current + 1 < this.playlist.length ? this.current + 1 : 0;
            this.loop ? 0 === s && this.shuffled && this.options.playlistOptions.shuffleOnLoop && 1 < this.playlist.length ? this.shuffle(!0, !0) : this.play(s) : 0 < s && this.play(s) }, previous: function() { var s = 0 <= this.current - 1 ? this.current - 1 : this.playlist.length - 1;
            (this.loop && this.options.playlistOptions.loopOnPrevious || s < this.playlist.length - 1) && this.play(s) }, shuffle: function(s, t) { var e = this;
            s === i && (s = !this.shuffled), (s || s !== this.shuffled) && a(this.cssSelector.playlist + " ul").slideUp(this.options.playlistOptions.shuffleTime, function() {
                (e.shuffled = s) ? e.playlist.sort(function() { return .5 - Math.random() }): e._originalPlaylist(), e._refresh(!0), t || !a(e.cssSelector.jPlayer).data("jPlayer").status.paused ? e.play(0) : e.select(0), a(this).slideDown(e.options.playlistOptions.shuffleTime) }) }, blur: function(s) { a(this.cssSelector.jPlayer).jPlayer("option", "autoBlur") && a(s).blur() } } }(jQuery);